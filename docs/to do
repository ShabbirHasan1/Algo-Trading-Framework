1. Sort out all the issues with the broker login
    We will mimic the zerodha api broker login flow in our system. We will redirect user to the login page (custom) and user can login the broker from here.
    The login broker html page contains the form. We will pass the query parameters to the url (in the post method) so that we will be able to pass the userflow in the args parameter.
    Consider the way to handle all 4 login methods 
    handleBrokerLogin method from controller.py file should read the data from db instead of file. Make sure to handle this thing on priority.

2. Start and stop algo functinoality should be implemented via ajax call
3. Once coding for above 2 points is completed then restructure the entire project. The broker add code should be moved to broker.py file.
    Every method should send the appropriate status and error message as we are writing code in multiple files.
4. Trade manager and strategies implementation.
5. Execution engine which contains the trade manager and trade executor
6. All the logics where we are processing the data in this framework needs to be optimized. We can use pandas to process the data instead of using multiple for loops
7. Handle errors while fetching the instruments data from server.
8. Handle eerrors while broker login ia request module.


Code refactoring changs
1. use get() everywhere while fatching the data from dict.
2. Use context manager instead of directly using open.
3. Restructure the code by handling the proper exceptions. Same needs to be handled in restapis and zerodha_web_login page.
4. Start snake_case from base_ticker.py
    pending for following method in base_ticker and Zerodha_ticker. We may need to use super command to call the base class method since name of base and derived class is same.
    -onConnect(self):
    -onDisconnect(self, code, reason):
    -onError(self, code, reason):
    -onReconnect(self, attemptsCount):
    -onMaxReconnectsAttempt(self):
    -onOrderUpdate(self, data):